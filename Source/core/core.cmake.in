# Try to find all dependencies to build proprietary plugins
# Once done this will be defined:
#  CORE_FOUND        - System has support to build Proprietary Plugins
#  CORE_INCLUDE_DIRS - The include directories
#  CORE_LIBRARIES    - The libraries needed
#  CORE_LIBRARY_DIR  - The libraries needed
#  CORE_DEFINITIONS  - The compiler flags needed to compile this library correctly
# 
# Input: CORE_VERSION

find_package(PkgConfig)
pkg_check_modules(PC_CORE @NAMESPACE@Core)

if(PC_CORE_FOUND)
    if(CORE_VERSION AND PC_CORE_VERSION)
        if ("${CORE_VERSION}" VERSION_GREATER "${PC_CORE_VERSION}")
            message(WARNING "Incorrect version, found ${PC_CORE_VERSION}, need at least ${CORE_VERSION}, please install correct version.")
            set(CORE_FOUND_TEXT "Found incorrect version")
            unset(PC_CORE_FOUND)
        endif()
    endif()
else()
    set(CORE_FOUND_TEXT "Not found")
endif()

if(PC_CORE_FOUND)
    set(CORE_DEFINITIONS ${PC_CORE_CFLAGS_OTHER})
    set(CORE_INCLUDE_DIR ${PC_CORE_INCLUDE_DIRS})
    set(CORE_LIBRARIES   ${PC_CORE_LIBRARIES})
    set(CORE_LIBRARY_DIR ${PC_CORE_LIBRARY_DIRS})
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(CORE DEFAULT_MSG CORE_LIBRARIES CORE_INCLUDE_DIR)

mark_as_advanced(CORE_DEFINITIONS CORE_INCLUDE_DIR CORE_LIBRARIES CORE_LIBRARY_DIR)
