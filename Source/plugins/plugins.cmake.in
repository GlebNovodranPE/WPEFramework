# Try to find all dependencies to build proprietary plugin
# Once done this will be defined:
#  PLUGINS_FOUND        - System has support to build Proprietary Plugins
#  PLUGINS_DEFINITIONS  - Definitions required to do a proper compile
#  PLUGINS_INCLUDE_DIRS - The include directories
#  PLUGINS_LIBRARIES    - The libraries needed
#  PLUGINS_LIBRARY_DIR  - The libraries needed
# 
# Input: PLUGINS_VERSION

find_package(PkgConfig)
pkg_check_modules(PC_CORE @NAMESPACE@Core)
pkg_check_modules(PC_PLUGINS @NAMESPACE@Plugins)

if(PC_CORE_FOUND AND PC_PLUGINS_FOUND)
    if(PLUGINS_VERSION AND PC_PLUGINS_VERSION)
        if ("${PLUGINS_VERSION}" VERSION_GREATER "${PC_PLUGINS_VERSION}")
            message(WARNING "Incorrect version, found ${PC_PLUGINS_VERSION}, need at least ${PLUGINS_VERSION}, please install correct version ${WPEFRAMEWORKPLUGINS_FIND_VERSION}")
            set(PLUGINS_FOUND_TEXT "Found incorrect version")
            unset(PC_PLUGINS_FOUND)
        endif()
    endif()
else()
    set(PLUGINS_FOUND_TEXT "Not found")
endif()

if(PC_CORE_FOUND AND PC_PLUGINS_FOUND)
    set(PLUGINS_DEFINITIONS "${PC_CORE_CFLAGS_OTHER};${PC_PLUGINS_CFLAGS_OTHER}")
    set(PLUGINS_INCLUDE_DIR "${PC_CORE_INCUDE_DIRS};${PC_PLUGINS_INCLUDE_DIRS}")
    set(PLUGINS_LIBRARIES   "${PC_CORE_LIBRARIES};${PC_PLUGINS_LIBRARIES}")
    set(PLUGINS_LIBRARY_DIR "${PC_CORE_LIBRARY_DIRS};${PC_PLUGINS_LIBRARY_DIRS}")
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(PLUGINS DEFAULT_MSG PLUGINS_LIBRARIES  PLUGINS_INCLUDE_DIR)

mark_as_advanced(PLUGINS_DEFINITIONS PLUGINS_INCLUDE_DIR PLUGINS_LIBRARIES PLUGINS_LIBRARY_DIR)
