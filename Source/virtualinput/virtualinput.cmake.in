# Try to find all dependencies to build proprietary plugins
# Once done this will be defined:
#  VIRTUALINPUT_FOUND        - System has support to build Proprietary Plugins
#  VIRTUALINPUT_INCLUDE_DIRS - The include directories
#  VIRTUALINPUT_LIBRARIES    - The libraries needed
#  VIRTUALINPUT_LIBRARY_DIR  - The libraries needed
#  VIRTUALINPUT_DEFINITIONS  - The compiler flags needed to compile this library correctly
# 
# Input: VIRTUALINPUT_VERSION

find_package(PkgConfig)
pkg_check_modules(PC_VIRTUALINPUT @NAMESPACE@VirtualInput)

if(PC_VIRTUALINPUT_FOUND)
    if(VIRTUALINPUT_VERSION AND PC_VIRTUALINPUT_VERSION)
        if ("${VIRTUALINPUT_VERSION}" VERSION_GREATER "${PC_VIRTUALINPUT_VERSION}")
            message(WARNING "Incorrect version, found ${PC_VIRTUALINPUT_VERSION}, need at least ${VIRTUALINPUT_VERSION}, please install correct version.")
            set(VIRTUALINPUT_FOUND_TEXT "Found incorrect version")
            unset(PC_VIRTUALINPUT_FOUND)
        endif()
    endif()
else()
    set(VIRTUALINPUT_FOUND_TEXT "Not found")
endif()

if(PC_VIRTUALINPUT_FOUND)
    set(VIRTUALINPUT_DEFINITIONS ${PC_VIRTUALINPUT_CFLAGS_OTHER})
    set(VIRTUALINPUT_INCLUDE_DIR ${PC_VIRTUALINPUT_INCUDE_DIRS})
    set(VIRTUALINPUT_LIBRARIES   ${PC_VIRTUALINPUT_LIBRARIES})
    set(VIRTUALINPUT_LIBRARY_DIR ${PC_VIRTUALINPUT_LIBRARY_DIRS})
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(VIRTUALINPUT DEFAULT_MSG VIRTUALINPUT_LIBRARIES VIRTUALINPUT_INCLUDE_DIR)

mark_as_advanced(VIRTUALINPUT_DEFINITIONS VIRTUALINPUT_INCLUDE_DIR VIRTUALINPUT_LIBRARIES VIRTUALINPUT_LIBRARY_DIR)
